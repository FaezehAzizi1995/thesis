# -*- coding: utf-8 -*-
"""clustering5-tsne.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1akWmBmi0j8FZIasgaKgCNz_T35fGQBwC

# **fuzzy cmeans**
"""

with open('w.txt') as f:
  lines = [line.rstrip('\n') for line in f]

embeddings=list()

import pandas as pd

embeddings=pd.read_csv('w.txt', sep='\t', header=0,encoding='UTF-8')

from sklearn.manifold import TSNE
tsne = TSNE(n_components=2)
umap_embeddings = tsne.fit_transform(embeddings)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

feature_columns = ['1','2','3'	,'4'	,'5'	,'6',	'7',	'8',	'9',	'10',	'11',	'12',	'13',	'14',	'15',	'16',	'17',
                   '18',	'19',	'20',	'21',	'22',	'23',	'24',	'25',	'26',	'27',	'28',	'29',	'30',	'31',	'32',	'33',
                   '34',	'35',	'36',	'37',	'38',	'39',	'40',	'41',	'42',	'43',	'44',	'45',	'46',	'47',	'48',	'49',
                   '50',	'51',	'52',	'53',	'54',	'55',	'56',	'57',	'58',	'59',	'60',	'61',	'62',	'63',	'64',	'65',
                   '66',	'67',	'68',	'69',	'70',	'71',	'72',	'73',	'74',	'75',	'76',	'77',	'78',	'79',	'80',	'81',
                   '82',	'83',	'84',	'85',	'86',	'87',	'88',	'89',	'90',	'91',	'92',	'93', '94',	'95',	'96',	'97',
                   '98',	'99',	'100',	'101'	,'102',	'103',	'104',	'105',	'106',	'107',	'108',	'109',	'110',
                   '111',	'112',	'113',	'114',	'115',	'116',	'117',	'118',	'119',	'120']

X = embeddings[feature_columns]

pip install fuzzy-c-means

import numpy as np
from fcmeans import FCM
fcm = FCM(n_clusters=8) # we use two cluster as an example
fcm.fit(X.to_numpy())

centers = fcm.centers
labels = fcm.predict(X.to_numpy())

print(centers)

print(labels)

import matplotlib.pyplot as plt
import pandas as pd
# Prepare data
#umap_data = umap.UMAP(n_neighbors=3, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) #کاهش بعد به 2
tsne = TSNE(n_components=2)
umap_data = tsne.fit_transform(embeddings)
result = pd.DataFrame(umap_data, columns=['x', 'y'])
result['labels'] = labels

print(labels)

from sklearn.metrics import davies_bouldin_score
db_index = davies_bouldin_score(umap_embeddings, labels)
print(db_index)

print(len(umap_embeddings))

print(len(labels))

#print(umap_embeddings)

unique_labels = list(set(labels))
colors = ['red', 'blue', 'yellow', 'black','grey','green','orange', 'pink']

for i in unique_labels:
    filtered_label = umap_embeddings[labels == i]
    plt.scatter(filtered_label[:,0],
                filtered_label[:,1],
                color = colors[i],
                edgecolor='k')

plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.show()

#import hdbscan
#cluster = hdbscan.HDBSCAN(min_cluster_size=5, metric='euclidean', cluster_selection_method='eom').fit(umap_embeddings)
#import matplotlib.pyplot as plt
#import pandas as pd
# Prepare data
#umap_data = umap.UMAP(n_neighbors=3, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) #کاهش بعد به 2
#result = pd.DataFrame(umap_data, columns=['x', 'y'])
#result['labels'] = cluster.labels_

results = {}

for i in range(3,10):
    cluster= FCM(n_clusters=i)
   # fcm = FCM(n_clusters=8) # we use two cluster as an example
    cluster.fit(X.to_numpy())
   # cluster = KMeans(n_clusters = i, max_iter = 300, random_state = 0).fit(umap_embeddings)
   # cluster = hdbscan.HDBSCAN(min_cluster_size=i, metric='euclidean', cluster_selection_method='eom').fit(umap_embeddings)
    #umap_data = umap.UMAP(n_neighbors=2, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings)
    tsne = TSNE(n_components=2)
    umap_data = tsne.fit_transform(embeddings)
    result = pd.DataFrame(umap_data, columns=['x', 'y'])
    result['labels'] = cluster.predict(X.to_numpy())
    db_index = davies_bouldin_score(umap_embeddings, cluster.predict(X.to_numpy()))
    print(db_index)
    results.update({i: db_index})

    #kmeans = KMeans(n_clusters=i, random_state=30)
   # labels= kmeans.fit_predict(umap_embeddings)
  #  db_index = davies_bouldin_score(umap_embeddings, cluster.labels_)
   # results.update({i: db_index})

plt.plot(list(results.keys()), list(results.values()))
plt.xlabel("k")
plt.ylabel("Davies-Bouldin")
plt.show()

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
# %matplotlib inline

results = {}

for i in range(3,10):
    cluster= FCM(n_clusters=i)
   # fcm = FCM(n_clusters=8) # we use two cluster as an example
    cluster.fit(X.to_numpy())
   # cluster = hdbscan.HDBSCAN(min_cluster_size=i, metric='euclidean', cluster_selection_method='eom').fit(umap_embeddings)
    tsne = TSNE(n_components=2)
    umap_data = tsne.fit_transform(embeddings)
    #umap_data = umap.UMAP(n_neighbors=2, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings)
    result = pd.DataFrame(umap_data, columns=['x', 'y'])
    result['labels'] = cluster.predict(X.to_numpy())
    #db_index = davies_bouldin_score(umap_embeddings, cluster.labels_)
    silhouette = silhouette_score(umap_embeddings, cluster.predict(X.to_numpy()))
    print(silhouette)
    results.update({i: silhouette})

plt.plot(list(results.keys()), list(results.values()))
plt.xlabel("k")
plt.ylabel("Silhouettes")
plt.show()

from sklearn import metrics

results = {}

for i in range(3,10):
    cluster= FCM(n_clusters=i)
   # fcm = FCM(n_clusters=8) # we use two cluster as an example
    cluster.fit(X.to_numpy())
   # cluster = hdbscan.HDBSCAN(min_cluster_size=i, metric='euclidean', cluster_selection_method='eom').fit(umap_embeddings)
   # umap_data = umap.UMAP(n_neighbors=2, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings)
    tsne = TSNE(n_components=2)
    umap_data = tsne.fit_transform(embeddings)
    result = pd.DataFrame(umap_data, columns=['x', 'y'])
    result['labels'] = cluster.predict(X.to_numpy())
    #db_index = davies_bouldin_score(umap_embeddings, cluster.labels_)
    #silhouette = silhouette_score(umap_embeddings, cluster.labels_)
    CH = metrics.calinski_harabasz_score(umap_embeddings, cluster.predict(X.to_numpy()))
    print(CH)
    results.update({i: CH})

plt.plot(list(results.keys()), list(results.values()))
plt.xlabel("k")
plt.ylabel("Calinski Harabasz")
plt.show()