# -*- coding: utf-8 -*-
"""3 clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13IfDWDi8YrgYrbY8UIVn2rpWe6P8Y3xI

# hdbscan
"""

#pip install joblib==1.1.0

pip install umap-learn

with open('w.txt') as f:
  lines = [line.rstrip('\n') for line in f]

embeddings=list()

import pandas as pd

embeddings=pd.read_csv('w.txt', sep='\t', header=0,encoding='UTF-8')

print(embeddings[:121])

import umap
umap_embeddings = umap.UMAP(n_neighbors=5, n_components=3, metric='cosine').fit_transform(embeddings)
#کاهش بعد به 5---همسایه های محلی 15

pip install hdbscan   #خوشه بندی

import hdbscan
cluster = hdbscan.HDBSCAN(min_cluster_size=5, metric='euclidean', cluster_selection_method='eom').fit(umap_embeddings)
#fit(umap_embedings)

import matplotlib.pyplot as plt
import pandas as pd
# Prepare data
umap_data = umap.UMAP(n_neighbors=3, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) #کاهش بعد به 2
result = pd.DataFrame(umap_data, columns=['x', 'y'])
result['labels'] = cluster.labels_

print(len(umap_embeddings))

print(len(cluster.labels_))

print(umap_embeddings)

print(cluster.labels_)

from sklearn.metrics import davies_bouldin_score
db_index = davies_bouldin_score(umap_embeddings, cluster.labels_)
print(db_index)

unique_labels = list(set(cluster.labels_))
colors = ['red', 'orange', 'grey']

for i in unique_labels:
    filtered_label = umap_embeddings[cluster.labels_ == i]
    plt.scatter(filtered_label[:,0],
                filtered_label[:,1],
                color = colors[i],
                edgecolor='k')

plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.show()

#import hdbscan
#cluster = hdbscan.HDBSCAN(min_cluster_size=5, metric='euclidean', cluster_selection_method='eom').fit(umap_embeddings)
#import matplotlib.pyplot as plt
#import pandas as pd
# Prepare data
#umap_data = umap.UMAP(n_neighbors=3, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) #کاهش بعد به 2
#result = pd.DataFrame(umap_data, columns=['x', 'y'])
#result['labels'] = cluster.labels_

results = {}

for i in range(3,10):
    cluster = hdbscan.HDBSCAN(min_cluster_size=i, metric='euclidean', cluster_selection_method='eom').fit(umap_embeddings)
    umap_data = umap.UMAP(n_neighbors=5, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings)
    result = pd.DataFrame(umap_data, columns=['x', 'y'])
    result['labels'] = cluster.labels_
    db_index = davies_bouldin_score(umap_embeddings, cluster.labels_)
    print(db_index)
    results.update({i: db_index})

    #kmeans = KMeans(n_clusters=i, random_state=30)
   # labels= kmeans.fit_predict(umap_embeddings)
  #  db_index = davies_bouldin_score(umap_embeddings, cluster.labels_)
   # results.update({i: db_index})

plt.plot(list(results.keys()), list(results.values()))
plt.xlabel("Number of clusters")
plt.ylabel("Davies-Boulding Index")
plt.show()

# Visualize clusters
fig, ax = plt.subplots(figsize=(10, 10))
outliers = result.loc[result.labels == -1, :]
clustered = result.loc[result.labels != -1, :]
plt.scatter(outliers.x, outliers.y, color='#BDBDBD', s=0.05)
plt.scatter(clustered.x, clustered.y, c=clustered.labels, s=0.05, cmap='hsv_r')
plt.colorbar()
plt.savefig('myfig.png')

print(len(cluster.labels_))

print(cluster.labels_)

"""# **BEFORE UMAP hdbscan**"""

with open('w.txt') as f:
  lines = [line.rstrip('\n') for line in f]

embedding=list()

import pandas as pd

embedding=pd.read_csv('w.txt', sep='\t', header=0,encoding='UTF-8')

print(embedding[:121])

pip install hdbscan   #خوشه بندی

import hdbscan
cluster = hdbscan.HDBSCAN(min_cluster_size=3, metric='euclidean', cluster_selection_method='eom').fit(embedding)
#fit(umap_embedings)

import matplotlib.pyplot as plt
import pandas as pd
# Prepare data
##umap_data = umap.UMAP(n_neighbors=3, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) #کاهش بعد به 2
result = pd.DataFrame(embedding, columns=['x', 'y'])
result['labels'] = cluster.labels_

print(len(embedding))

print(len(cluster.labels_))

print(embedding)

print(cluster.labels_)

from sklearn.metrics import davies_bouldin_score
db_index = davies_bouldin_score(embedding, cluster.labels_)
print(db_index)

#import hdbscan
#cluster = hdbscan.HDBSCAN(min_cluster_size=5, metric='euclidean', cluster_selection_method='eom').fit(umap_embeddings)
#import matplotlib.pyplot as plt
#import pandas as pd
# Prepare data
#umap_data = umap.UMAP(n_neighbors=3, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) #کاهش بعد به 2
#result = pd.DataFrame(umap_data, columns=['x', 'y'])
#result['labels'] = cluster.labels_

results = {}

for i in range(2,4):
    cluster = hdbscan.HDBSCAN(min_cluster_size=i, metric='euclidean', cluster_selection_method='eom').fit(embedding)
    #umap_data = umap.UMAP(n_neighbors=5, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings)
    result = pd.DataFrame(embedding, columns=['x', 'y'])
    result['labels'] = cluster.labels_
    db_index = davies_bouldin_score(embedding, cluster.labels_)
    print(db_index)
    results.update({i: db_index})

    #kmeans = KMeans(n_clusters=i, random_state=30)
   # labels= kmeans.fit_predict(umap_embeddings)
  #  db_index = davies_bouldin_score(umap_embeddings, cluster.labels_)
   # results.update({i: db_index})

plt.plot(list(results.keys()), list(results.values()))
plt.xlabel("Minimum Cluster Size")
plt.ylabel("Davies-Boulding Index")
plt.show()

# Visualize clusters
fig, ax = plt.subplots(figsize=(10, 10))
outliers = result.loc[result.labels == -1, :]
clustered = result.loc[result.labels != -1, :]
plt.scatter(outliers.x, outliers.y, color='#BDBDBD', s=0.05)
plt.scatter(clustered.x, clustered.y, c=clustered.labels, s=0.05, cmap='hsv_r')
plt.colorbar()
plt.savefig('myfig.png')

print(len(cluster.labels_))

print(cluster.labels_)

